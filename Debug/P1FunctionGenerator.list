
P1FunctionGenerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001998  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  08001b20  08001b20  00011b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022f0  080022f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080022f0  080022f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022f0  080022f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022f0  080022f0  000122f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022f4  080022f4  000122f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  2000000c  08002304  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  08002304  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000053a9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001236  00000000  00000000  000253e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b8  00000000  00000000  00026620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000530  00000000  00000000  00026bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024fd0  00000000  00000000  00027108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000692a  00000000  00000000  0004c0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e172c  00000000  00000000  00052a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013412e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001448  00000000  00000000  00134180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001b08 	.word	0x08001b08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001b08 	.word	0x08001b08

080001c8 <DAC_init>:
 *  Created on: Apr 24, 2023
 *      Author: colecosta7
 */
#include "../DAC_lib/DAC_lib.h"

void DAC_init(void){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	//enable SPI clock, GPIO clock
	RCC -> APB2ENR |= (RCC_APB2ENR_SPI1EN);
 80001cc:	4b3f      	ldr	r3, [pc, #252]	; (80002cc <DAC_init+0x104>)
 80001ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80001d0:	4a3e      	ldr	r2, [pc, #248]	; (80002cc <DAC_init+0x104>)
 80001d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80001d6:	6613      	str	r3, [r2, #96]	; 0x60
	RCC -> AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 80001d8:	4b3c      	ldr	r3, [pc, #240]	; (80002cc <DAC_init+0x104>)
 80001da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001dc:	4a3b      	ldr	r2, [pc, #236]	; (80002cc <DAC_init+0x104>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	64d3      	str	r3, [r2, #76]	; 0x4c

	//configure GPIO for MOSI PA7, SCLK PA5, NSS PA4
	GPIOA -> MODER &= ~(GPIO_MODER_MODE5 |
 80001e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001ee:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80001f2:	6013      	str	r3, [r2, #0]
						GPIO_MODER_MODE7 |
						GPIO_MODER_MODE4);
	GPIOA -> MODER |= (GPIO_MODER_MODE5_1 |
 80001f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001fe:	f443 430a 	orr.w	r3, r3, #35328	; 0x8a00
 8000202:	6013      	str	r3, [r2, #0]
						GPIO_MODER_MODE7_1 |
						GPIO_MODER_MODE4_1);	//AF for PA5, PA7, PA4

	GPIOA -> OTYPER &= ~(GPIO_OTYPER_OT5 |
 8000204:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800020e:	f023 03b0 	bic.w	r3, r3, #176	; 0xb0
 8000212:	6053      	str	r3, [r2, #4]
						GPIO_OTYPER_OT7 |
						GPIO_OTYPER_OT4);		//push-pull for all

	GPIOA -> PUPDR &= ~(GPIO_PUPDR_PUPD5 |
 8000214:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000218:	68db      	ldr	r3, [r3, #12]
 800021a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800021e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8000222:	60d3      	str	r3, [r2, #12]
						GPIO_PUPDR_PUPD7 |
						GPIO_PUPDR_PUPD4);		//none for all

	GPIOA -> OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5 |
 8000224:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000228:	689b      	ldr	r3, [r3, #8]
 800022a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800022e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8000232:	6093      	str	r3, [r2, #8]
						GPIO_OSPEEDR_OSPEED7 |
						GPIO_OSPEEDR_OSPEED4);	//low speed for all possibly change

	GPIOA -> AFR[0] |= (AF5 << GPIO_AFRL_AFSEL5_Pos |
 8000234:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000238:	6a1b      	ldr	r3, [r3, #32]
 800023a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800023e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000242:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8000246:	6213      	str	r3, [r2, #32]
					AF5 << GPIO_AFRL_AFSEL7_Pos |
					AF5 << GPIO_AFRL_AFSEL4_Pos);	//AF5 Alternate Function for SPI1

	//configure the SPI CR1 register
	SPI1 -> CR1 &= ~(SPI_CR1_BR);
 8000248:	4b21      	ldr	r3, [pc, #132]	; (80002d0 <DAC_init+0x108>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a20      	ldr	r2, [pc, #128]	; (80002d0 <DAC_init+0x108>)
 800024e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000252:	6013      	str	r3, [r2, #0]
	//SPI1 -> CR1 |= (SPI_CR1_BR_1);	//set baud rate to clk/2

	SPI1 -> CR1 &= ~(SPI_CR1_CPHA | SPI_CR1_CPOL);	//set MODE 0'0
 8000254:	4b1e      	ldr	r3, [pc, #120]	; (80002d0 <DAC_init+0x108>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a1d      	ldr	r2, [pc, #116]	; (80002d0 <DAC_init+0x108>)
 800025a:	f023 0303 	bic.w	r3, r3, #3
 800025e:	6013      	str	r3, [r2, #0]

	SPI1 -> CR1 &= ~(SPI_CR1_RXONLY);				//set transmit only mode
 8000260:	4b1b      	ldr	r3, [pc, #108]	; (80002d0 <DAC_init+0x108>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a1a      	ldr	r2, [pc, #104]	; (80002d0 <DAC_init+0x108>)
 8000266:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800026a:	6013      	str	r3, [r2, #0]

	SPI1 -> CR1 &= ~(SPI_CR1_LSBFIRST);				//MSB transferred first
 800026c:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <DAC_init+0x108>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a17      	ldr	r2, [pc, #92]	; (80002d0 <DAC_init+0x108>)
 8000272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000276:	6013      	str	r3, [r2, #0]

	SPI1 -> CR1 &= ~(SPI_CR1_SSM);					//hardware controlled CS
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <DAC_init+0x108>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a14      	ldr	r2, [pc, #80]	; (80002d0 <DAC_init+0x108>)
 800027e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000282:	6013      	str	r3, [r2, #0]

	SPI1 -> CR1 |= (SPI_CR1_MSTR);					//set master mode for peripheral
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <DAC_init+0x108>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a11      	ldr	r2, [pc, #68]	; (80002d0 <DAC_init+0x108>)
 800028a:	f043 0304 	orr.w	r3, r3, #4
 800028e:	6013      	str	r3, [r2, #0]

	SPI1 -> CR2 |= (SPI_CR2_DS_0 | SPI_CR2_DS_1 |
 8000290:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <DAC_init+0x108>)
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <DAC_init+0x108>)
 8000296:	f443 6330 	orr.w	r3, r3, #2816	; 0xb00
 800029a:	6053      	str	r3, [r2, #4]
				 	SPI_CR2_DS_3);					//set data frame 12 bits

	SPI1 -> CR2 |= (SPI_CR2_SSOE);					//set SSOE
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <DAC_init+0x108>)
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	4a0b      	ldr	r2, [pc, #44]	; (80002d0 <DAC_init+0x108>)
 80002a2:	f043 0304 	orr.w	r3, r3, #4
 80002a6:	6053      	str	r3, [r2, #4]

	SPI1 -> CR2 |= (SPI_CR2_NSSP);					//pulse mode
 80002a8:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <DAC_init+0x108>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	4a08      	ldr	r2, [pc, #32]	; (80002d0 <DAC_init+0x108>)
 80002ae:	f043 0308 	orr.w	r3, r3, #8
 80002b2:	6053      	str	r3, [r2, #4]

	SPI1 -> CR1 |= (SPI_CR1_SPE);					//enable SPI1
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <DAC_init+0x108>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <DAC_init+0x108>)
 80002ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002be:	6013      	str	r3, [r2, #0]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40021000 	.word	0x40021000
 80002d0:	40013000 	.word	0x40013000

080002d4 <DAC_write>:

void DAC_write(uint16_t voltage){
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	80fb      	strh	r3, [r7, #6]
	//or the 12 bit voltage value with configuration byte
	uint16_t data = voltage | 0x3000;
 80002de:	88fb      	ldrh	r3, [r7, #6]
 80002e0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80002e4:	81fb      	strh	r3, [r7, #14]
	//wait for TX buffer to be empty
	while (!(SPI1->SR & SPI_SR_TXE)){};
 80002e6:	bf00      	nop
 80002e8:	4b07      	ldr	r3, [pc, #28]	; (8000308 <DAC_write+0x34>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	f003 0302 	and.w	r3, r3, #2
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f9      	beq.n	80002e8 <DAC_write+0x14>
	//set the data register
	SPI1 -> DR = data;
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <DAC_write+0x34>)
 80002f6:	89fb      	ldrh	r3, [r7, #14]
 80002f8:	60d3      	str	r3, [r2, #12]

}
 80002fa:	bf00      	nop
 80002fc:	3714      	adds	r7, #20
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40013000 	.word	0x40013000

0800030c <DAC_volt_conv>:

uint16_t DAC_volt_conv(uint16_t voltage){
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	80fb      	strh	r3, [r7, #6]
	uint16_t value = (uint16_t)(4095 * voltage / 3300);
 8000316:	88fa      	ldrh	r2, [r7, #6]
 8000318:	4613      	mov	r3, r2
 800031a:	031b      	lsls	r3, r3, #12
 800031c:	1a9b      	subs	r3, r3, r2
 800031e:	4a07      	ldr	r2, [pc, #28]	; (800033c <DAC_volt_conv+0x30>)
 8000320:	fb82 1203 	smull	r1, r2, r2, r3
 8000324:	441a      	add	r2, r3
 8000326:	12d2      	asrs	r2, r2, #11
 8000328:	17db      	asrs	r3, r3, #31
 800032a:	1ad3      	subs	r3, r2, r3
 800032c:	81fb      	strh	r3, [r7, #14]
	return value;
 800032e:	89fb      	ldrh	r3, [r7, #14]
}
 8000330:	4618      	mov	r0, r3
 8000332:	3714      	adds	r7, #20
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	9ee009ef 	.word	0x9ee009ef

08000340 <keypad_config>:

#include "keypad_lib.h"
//2d constant lookup table to find each number
const int8_t keypad_matrix[4][4] = {{1,2,3,10}, {4,5,6,11}, {7,8,9,12}, {14, 0, 15, 13}};

void keypad_config(void){
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	//Enable Clock
	RCC -> AHB2ENR |= (RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOCEN);
 8000344:	4b1e      	ldr	r3, [pc, #120]	; (80003c0 <keypad_config+0x80>)
 8000346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000348:	4a1d      	ldr	r2, [pc, #116]	; (80003c0 <keypad_config+0x80>)
 800034a:	f043 0306 	orr.w	r3, r3, #6
 800034e:	64d3      	str	r3, [r2, #76]	; 0x4c

	//Enable Rows and Cols MODE Register
	//Sets ROW as INPUT type
	ROW_PORT -> MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 |
 8000350:	4b1c      	ldr	r3, [pc, #112]	; (80003c4 <keypad_config+0x84>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a1b      	ldr	r2, [pc, #108]	; (80003c4 <keypad_config+0x84>)
 8000356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800035a:	6013      	str	r3, [r2, #0]
			GPIO_MODER_MODE7);

	//Sets COL as OUTPUT type
	COL_PORT -> MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 |
 800035c:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <keypad_config+0x88>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a19      	ldr	r2, [pc, #100]	; (80003c8 <keypad_config+0x88>)
 8000362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000366:	6013      	str	r3, [r2, #0]
				GPIO_MODER_MODE7);
	COL_PORT -> MODER |= (GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 |
 8000368:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <keypad_config+0x88>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a16      	ldr	r2, [pc, #88]	; (80003c8 <keypad_config+0x88>)
 800036e:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000372:	6013      	str	r3, [r2, #0]
			GPIO_MODER_MODE7_0);

	//Enable PUPDR as PULL DOWN for ROWS
	ROW_PORT -> PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 |
 8000374:	4b13      	ldr	r3, [pc, #76]	; (80003c4 <keypad_config+0x84>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	4a12      	ldr	r2, [pc, #72]	; (80003c4 <keypad_config+0x84>)
 800037a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800037e:	60d3      	str	r3, [r2, #12]
			GPIO_PUPDR_PUPD7);
	ROW_PORT -> PUPDR |= (GPIO_PUPDR_PUPD4_1 | GPIO_PUPDR_PUPD5_1 | GPIO_PUPDR_PUPD6_1 |
 8000380:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <keypad_config+0x84>)
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	4a0f      	ldr	r2, [pc, #60]	; (80003c4 <keypad_config+0x84>)
 8000386:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 800038a:	60d3      	str	r3, [r2, #12]
			GPIO_PUPDR_PUPD7_1);

	//Enable PUPDR as OFF for COLS
	COL_PORT -> PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 |
 800038c:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <keypad_config+0x88>)
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <keypad_config+0x88>)
 8000392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000396:	60d3      	str	r3, [r2, #12]
			GPIO_PUPDR_PUPD7);

	//Enable LOW Output Speed for COLS
	COL_PORT -> OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED4 | GPIO_OSPEEDR_OSPEED5 | GPIO_OSPEEDR_OSPEED6 |
 8000398:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <keypad_config+0x88>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <keypad_config+0x88>)
 800039e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80003a2:	6093      	str	r3, [r2, #8]
			GPIO_OSPEEDR_OSPEED7);

	//Enable OTYPE to Push Pull for COLS
	COL_PORT -> OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
 80003a4:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <keypad_config+0x88>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <keypad_config+0x88>)
 80003aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80003ae:	6053      	str	r3, [r2, #4]

	//Turn on all COLS
	COL_PORT -> BSRR = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <keypad_config+0x88>)
 80003b2:	22f0      	movs	r2, #240	; 0xf0
 80003b4:	619a      	str	r2, [r3, #24]


}
 80003b6:	bf00      	nop
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr
 80003c0:	40021000 	.word	0x40021000
 80003c4:	48000800 	.word	0x48000800
 80003c8:	48000400 	.word	0x48000400

080003cc <keypad_getKey>:

int8_t keypad_getKey(void){
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
	//if a row is detected high
	if(ROW_PORT -> IDR & ROW_MASK){
 80003d2:	4b2b      	ldr	r3, [pc, #172]	; (8000480 <keypad_getKey+0xb4>)
 80003d4:	691b      	ldr	r3, [r3, #16]
 80003d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d044      	beq.n	8000468 <keypad_getKey+0x9c>
		int8_t row_num = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	73fb      	strb	r3, [r7, #15]
		int8_t col_num = 0;
 80003e2:	2300      	movs	r3, #0
 80003e4:	73bb      	strb	r3, [r7, #14]
		//turn off all columns
		COL_PORT -> BRR = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 80003e6:	4b27      	ldr	r3, [pc, #156]	; (8000484 <keypad_getKey+0xb8>)
 80003e8:	22f0      	movs	r2, #240	; 0xf0
 80003ea:	629a      	str	r2, [r3, #40]	; 0x28
		//iterate through each column
		for(int col = GPIO_PIN_4; col <= GPIO_PIN_7; col <<= 1){
 80003ec:	2310      	movs	r3, #16
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	e037      	b.n	8000462 <keypad_getKey+0x96>
			//turn on individual column
			COL_PORT -> BSRR = col;
 80003f2:	4a24      	ldr	r2, [pc, #144]	; (8000484 <keypad_getKey+0xb8>)
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	6193      	str	r3, [r2, #24]
			//if a Row is high on this column
			if(ROW_PORT -> IDR & ROW_MASK){
 80003f8:	4b21      	ldr	r3, [pc, #132]	; (8000480 <keypad_getKey+0xb4>)
 80003fa:	691b      	ldr	r3, [r3, #16]
 80003fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d022      	beq.n	800044a <keypad_getKey+0x7e>
				//iterate through each row
				for(int row = GPIO_PIN_4; row <= GPIO_PIN_7; row <<= 1){
 8000404:	2310      	movs	r3, #16
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	e01c      	b.n	8000444 <keypad_getKey+0x78>
					//if the row is high
					if(ROW_PORT -> IDR & row){
 800040a:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <keypad_getKey+0xb4>)
 800040c:	691a      	ldr	r2, [r3, #16]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4013      	ands	r3, r2
 8000412:	2b00      	cmp	r3, #0
 8000414:	d00d      	beq.n	8000432 <keypad_getKey+0x66>
						//Turn on all the columns to prepare for the next key press
						COL_PORT -> BSRR = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 8000416:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <keypad_getKey+0xb8>)
 8000418:	22f0      	movs	r2, #240	; 0xf0
 800041a:	619a      	str	r2, [r3, #24]
						//return the right number from 2d lookup table
						return keypad_matrix[row_num][col_num];
 800041c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000424:	4918      	ldr	r1, [pc, #96]	; (8000488 <keypad_getKey+0xbc>)
 8000426:	0092      	lsls	r2, r2, #2
 8000428:	440a      	add	r2, r1
 800042a:	4413      	add	r3, r2
 800042c:	f993 3000 	ldrsb.w	r3, [r3]
 8000430:	e01f      	b.n	8000472 <keypad_getKey+0xa6>
					}
					//else increment
					row_num++;
 8000432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	3301      	adds	r3, #1
 800043a:	b2db      	uxtb	r3, r3
 800043c:	73fb      	strb	r3, [r7, #15]
				for(int row = GPIO_PIN_4; row <= GPIO_PIN_7; row <<= 1){
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b80      	cmp	r3, #128	; 0x80
 8000448:	dddf      	ble.n	800040a <keypad_getKey+0x3e>
				}
			}
			//else increment column # and turn off the column
			col_num++;
 800044a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800044e:	b2db      	uxtb	r3, r3
 8000450:	3301      	adds	r3, #1
 8000452:	b2db      	uxtb	r3, r3
 8000454:	73bb      	strb	r3, [r7, #14]
			COL_PORT -> BRR = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <keypad_getKey+0xb8>)
 8000458:	22f0      	movs	r2, #240	; 0xf0
 800045a:	629a      	str	r2, [r3, #40]	; 0x28
		for(int col = GPIO_PIN_4; col <= GPIO_PIN_7; col <<= 1){
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	2b80      	cmp	r3, #128	; 0x80
 8000466:	ddc4      	ble.n	80003f2 <keypad_getKey+0x26>
		}
	}
	//if no key press, return -1
	COL_PORT -> BSRR = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <keypad_getKey+0xb8>)
 800046a:	22f0      	movs	r2, #240	; 0xf0
 800046c:	619a      	str	r2, [r3, #24]

	return -1;
 800046e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000472:	4618      	mov	r0, r3
 8000474:	3714      	adds	r7, #20
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	48000800 	.word	0x48000800
 8000484:	48000400 	.word	0x48000400
 8000488:	08001b20 	.word	0x08001b20

0800048c <main>:
int16_t idx;
//size of the array
int16_t size;

int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
  HAL_Init();
 8000492:	f000 fb86 	bl	8000ba2 <HAL_Init>

  SystemClock_Config();
 8000496:	f000 f9a7 	bl	80007e8 <SystemClock_Config>

  //configure keypad
  keypad_config();
 800049a:	f7ff ff51 	bl	8000340 <keypad_config>

  //initialize DAC
  DAC_init();
 800049e:	f7ff fe93 	bl	80001c8 <DAC_init>

  //initial wave to display
  int16_t freq = 100;
 80004a2:	2364      	movs	r3, #100	; 0x64
 80004a4:	81fb      	strh	r3, [r7, #14]
  int8_t wave = SQUARE;
 80004a6:	2309      	movs	r3, #9
 80004a8:	737b      	strb	r3, [r7, #13]
  int16_t duty;

  //index into points array
  idx = 0;
 80004aa:	4bab      	ldr	r3, [pc, #684]	; (8000758 <main+0x2cc>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	801a      	strh	r2, [r3, #0]

  //size of the points array (per period)
  size = SAMPLES_SEC / freq;
 80004b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004b4:	f24a 4210 	movw	r2, #42000	; 0xa410
 80004b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80004bc:	b21a      	sxth	r2, r3
 80004be:	4ba7      	ldr	r3, [pc, #668]	; (800075c <main+0x2d0>)
 80004c0:	801a      	strh	r2, [r3, #0]

  //set to 50% duty cycle
  duty = size / 2;
 80004c2:	4ba6      	ldr	r3, [pc, #664]	; (800075c <main+0x2d0>)
 80004c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004c8:	0fda      	lsrs	r2, r3, #31
 80004ca:	4413      	add	r3, r2
 80004cc:	105b      	asrs	r3, r3, #1
 80004ce:	817b      	strh	r3, [r7, #10]

  //set array to hold values of 100 HZ square wave
  points = waveform(freq, wave, duty);
 80004d0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80004d4:	f997 100d 	ldrsb.w	r1, [r7, #13]
 80004d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 fa2f 	bl	8000940 <waveform>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4a9e      	ldr	r2, [pc, #632]	; (8000760 <main+0x2d4>)
 80004e6:	6013      	str	r3, [r2, #0]

  //initialize TIM2
  RCC->APB1ENR1 |= (RCC_APB1ENR1_TIM2EN);			//initialize RCC
 80004e8:	4b9e      	ldr	r3, [pc, #632]	; (8000764 <main+0x2d8>)
 80004ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ec:	4a9d      	ldr	r2, [pc, #628]	; (8000764 <main+0x2d8>)
 80004ee:	f043 0301 	orr.w	r3, r3, #1
 80004f2:	6593      	str	r3, [r2, #88]	; 0x58
  TIM2->DIER |= (TIM_DIER_UIE);						// enable interrupt on update event
 80004f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	60d3      	str	r3, [r2, #12]
  TIM2->SR &= ~(TIM_SR_UIF);						// clear update interrupt flag
 8000504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000508:	691b      	ldr	r3, [r3, #16]
 800050a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800050e:	f023 0301 	bic.w	r3, r3, #1
 8000512:	6113      	str	r3, [r2, #16]
  TIM2->ARR = CLOCKFREQ/SAMPLES_SEC + 5;			//set ARR to Output rate
 8000514:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000518:	f240 22fe 	movw	r2, #766	; 0x2fe
 800051c:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->CR1 |= (TIM_CR1_CEN);						//start the timer
 800051e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6013      	str	r3, [r2, #0]

  // enable interrupts in NVIC
  NVIC->ISER[0] = (1 << (TIM2_IRQn & 0x1F));
 800052e:	4b8e      	ldr	r3, [pc, #568]	; (8000768 <main+0x2dc>)
 8000530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000534:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000536:	b662      	cpsie	i
}
 8000538:	bf00      	nop
	  CHANGE_FREQ,
	  CHANGE_WAVE
  }state_type;

  //initial state
  state_type state = WAIT;
 800053a:	2300      	movs	r3, #0
 800053c:	727b      	strb	r3, [r7, #9]
  int8_t key;

  while (1)
  {
	//FSM
    switch(state){
 800053e:	7a7b      	ldrb	r3, [r7, #9]
 8000540:	2b03      	cmp	r3, #3
 8000542:	f200 8104 	bhi.w	800074e <main+0x2c2>
 8000546:	a201      	add	r2, pc, #4	; (adr r2, 800054c <main+0xc0>)
 8000548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800054c:	0800055d 	.word	0x0800055d
 8000550:	080005e5 	.word	0x080005e5
 8000554:	080006e1 	.word	0x080006e1
 8000558:	0800072b 	.word	0x0800072b
    	//state to wait for key press
    	case WAIT:
    		//get a key
    		key = keypad_getKey();
 800055c:	f7ff ff36 	bl	80003cc <keypad_getKey>
 8000560:	4603      	mov	r3, r0
 8000562:	723b      	strb	r3, [r7, #8]
    		//software delay for keypad
    		for(int32_t i = 0; i<200000; i++);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	e002      	b.n	8000570 <main+0xe4>
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3301      	adds	r3, #1
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a7e      	ldr	r2, [pc, #504]	; (800076c <main+0x2e0>)
 8000574:	4293      	cmp	r3, r2
 8000576:	ddf8      	ble.n	800056a <main+0xde>

    		//if a key was pressed
    		if (key != -1){
 8000578:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800057c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000580:	d02c      	beq.n	80005dc <main+0x150>
    			//if the key was 1,2,3,4,5 change frequency
    			if(key > 0 && key <= 5){
 8000582:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000586:	2b00      	cmp	r3, #0
 8000588:	dd06      	ble.n	8000598 <main+0x10c>
 800058a:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800058e:	2b05      	cmp	r3, #5
 8000590:	dc02      	bgt.n	8000598 <main+0x10c>
    				state = CHANGE_FREQ;
 8000592:	2302      	movs	r3, #2
 8000594:	727b      	strb	r3, [r7, #9]
 8000596:	e024      	b.n	80005e2 <main+0x156>
    			}

    			//change state to wave
    			else if(key > 5 && key <= 9){
 8000598:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800059c:	2b05      	cmp	r3, #5
 800059e:	dd08      	ble.n	80005b2 <main+0x126>
 80005a0:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80005a4:	2b09      	cmp	r3, #9
 80005a6:	dc04      	bgt.n	80005b2 <main+0x126>
    				wave = key;
 80005a8:	7a3b      	ldrb	r3, [r7, #8]
 80005aa:	737b      	strb	r3, [r7, #13]
    				state = CHANGE_WAVE;
 80005ac:	2303      	movs	r3, #3
 80005ae:	727b      	strb	r3, [r7, #9]
 80005b0:	e017      	b.n	80005e2 <main+0x156>
    			}

    			//change state to duty
    			else if((key == 0) || (key == 14) || (key == 15)){
 80005b2:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d008      	beq.n	80005cc <main+0x140>
 80005ba:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80005be:	2b0e      	cmp	r3, #14
 80005c0:	d004      	beq.n	80005cc <main+0x140>
 80005c2:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80005c6:	2b0f      	cmp	r3, #15
 80005c8:	f040 80c4 	bne.w	8000754 <main+0x2c8>
    				//only change duty if it is a square wave
    				if(wave == SQUARE)
 80005cc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80005d0:	2b09      	cmp	r3, #9
 80005d2:	f040 80bf 	bne.w	8000754 <main+0x2c8>
    					state = CHANGE_DUTY;
 80005d6:	2301      	movs	r3, #1
 80005d8:	727b      	strb	r3, [r7, #9]
    		//else stay in wait state
    		else {
    			state = WAIT;
    		}

    		break;
 80005da:	e0bb      	b.n	8000754 <main+0x2c8>
    			state = WAIT;
 80005dc:	2300      	movs	r3, #0
 80005de:	727b      	strb	r3, [r7, #9]
    		break;
 80005e0:	e0b8      	b.n	8000754 <main+0x2c8>
 80005e2:	e0b7      	b.n	8000754 <main+0x2c8>

    	//state to change duty cycle of square wave
    	case CHANGE_DUTY:
    		//key 0  resets 50% duty cycle
    		if(key == 0){
 80005e4:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d109      	bne.n	8000600 <main+0x174>
    			duty = size / 2;
 80005ec:	4b5b      	ldr	r3, [pc, #364]	; (800075c <main+0x2d0>)
 80005ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005f2:	0fda      	lsrs	r2, r3, #31
 80005f4:	4413      	add	r3, r2
 80005f6:	105b      	asrs	r3, r3, #1
 80005f8:	817b      	strh	r3, [r7, #10]
    			state = CHANGE_WAVE;
 80005fa:	2303      	movs	r3, #3
 80005fc:	727b      	strb	r3, [r7, #9]

    		//default
    		else
    			state = WAIT;

    		break;
 80005fe:	e0aa      	b.n	8000756 <main+0x2ca>
    		else if(key == 14){
 8000600:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000604:	2b0e      	cmp	r3, #14
 8000606:	d12c      	bne.n	8000662 <main+0x1d6>
    			int16_t decr = size / 10;
 8000608:	4b54      	ldr	r3, [pc, #336]	; (800075c <main+0x2d0>)
 800060a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800060e:	4a58      	ldr	r2, [pc, #352]	; (8000770 <main+0x2e4>)
 8000610:	fb82 1203 	smull	r1, r2, r2, r3
 8000614:	1092      	asrs	r2, r2, #2
 8000616:	17db      	asrs	r3, r3, #31
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	803b      	strh	r3, [r7, #0]
    			if((duty + decr) <= (size - decr)){
 800061c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000620:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000624:	441a      	add	r2, r3
 8000626:	4b4d      	ldr	r3, [pc, #308]	; (800075c <main+0x2d0>)
 8000628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800062c:	4619      	mov	r1, r3
 800062e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000632:	1acb      	subs	r3, r1, r3
 8000634:	429a      	cmp	r2, r3
 8000636:	dc11      	bgt.n	800065c <main+0x1d0>
    				duty += size / 10;
 8000638:	4b48      	ldr	r3, [pc, #288]	; (800075c <main+0x2d0>)
 800063a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800063e:	4a4c      	ldr	r2, [pc, #304]	; (8000770 <main+0x2e4>)
 8000640:	fb82 1203 	smull	r1, r2, r2, r3
 8000644:	1092      	asrs	r2, r2, #2
 8000646:	17db      	asrs	r3, r3, #31
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	b21b      	sxth	r3, r3
 800064c:	b29a      	uxth	r2, r3
 800064e:	897b      	ldrh	r3, [r7, #10]
 8000650:	4413      	add	r3, r2
 8000652:	b29b      	uxth	r3, r3
 8000654:	817b      	strh	r3, [r7, #10]
    				state = CHANGE_WAVE;
 8000656:	2303      	movs	r3, #3
 8000658:	727b      	strb	r3, [r7, #9]
    		break;
 800065a:	e07c      	b.n	8000756 <main+0x2ca>
    				state = WAIT;
 800065c:	2300      	movs	r3, #0
 800065e:	727b      	strb	r3, [r7, #9]
    		break;
 8000660:	e079      	b.n	8000756 <main+0x2ca>
    		else if(key == 15){
 8000662:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000666:	2b0f      	cmp	r3, #15
 8000668:	d137      	bne.n	80006da <main+0x24e>
    			int16_t incr = size / 10;
 800066a:	4b3c      	ldr	r3, [pc, #240]	; (800075c <main+0x2d0>)
 800066c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000670:	4a3f      	ldr	r2, [pc, #252]	; (8000770 <main+0x2e4>)
 8000672:	fb82 1203 	smull	r1, r2, r2, r3
 8000676:	1092      	asrs	r2, r2, #2
 8000678:	17db      	asrs	r3, r3, #31
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	807b      	strh	r3, [r7, #2]
    			if((duty - incr) >= (size - (size * 9 / 10))){
 800067e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000682:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000686:	1ad2      	subs	r2, r2, r3
 8000688:	4b34      	ldr	r3, [pc, #208]	; (800075c <main+0x2d0>)
 800068a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800068e:	4618      	mov	r0, r3
 8000690:	4b32      	ldr	r3, [pc, #200]	; (800075c <main+0x2d0>)
 8000692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000696:	4619      	mov	r1, r3
 8000698:	460b      	mov	r3, r1
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	440b      	add	r3, r1
 800069e:	4934      	ldr	r1, [pc, #208]	; (8000770 <main+0x2e4>)
 80006a0:	fb81 c103 	smull	ip, r1, r1, r3
 80006a4:	1089      	asrs	r1, r1, #2
 80006a6:	17db      	asrs	r3, r3, #31
 80006a8:	1a5b      	subs	r3, r3, r1
 80006aa:	4403      	add	r3, r0
 80006ac:	429a      	cmp	r2, r3
 80006ae:	db11      	blt.n	80006d4 <main+0x248>
    				duty -= size / 10;
 80006b0:	897a      	ldrh	r2, [r7, #10]
 80006b2:	4b2a      	ldr	r3, [pc, #168]	; (800075c <main+0x2d0>)
 80006b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006b8:	492d      	ldr	r1, [pc, #180]	; (8000770 <main+0x2e4>)
 80006ba:	fb81 0103 	smull	r0, r1, r1, r3
 80006be:	1089      	asrs	r1, r1, #2
 80006c0:	17db      	asrs	r3, r3, #31
 80006c2:	1acb      	subs	r3, r1, r3
 80006c4:	b21b      	sxth	r3, r3
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	817b      	strh	r3, [r7, #10]
    				state = CHANGE_WAVE;
 80006ce:	2303      	movs	r3, #3
 80006d0:	727b      	strb	r3, [r7, #9]
    		break;
 80006d2:	e040      	b.n	8000756 <main+0x2ca>
    				state = WAIT;
 80006d4:	2300      	movs	r3, #0
 80006d6:	727b      	strb	r3, [r7, #9]
    		break;
 80006d8:	e03d      	b.n	8000756 <main+0x2ca>
    			state = WAIT;
 80006da:	2300      	movs	r3, #0
 80006dc:	727b      	strb	r3, [r7, #9]
    		break;
 80006de:	e03a      	b.n	8000756 <main+0x2ca>

    	//state to change the frequency
    	case CHANGE_FREQ:
    		//keys are 1,2,3,4,5 representing each frequency
    		freq = 100 * key;
 80006e0:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	461a      	mov	r2, r3
 80006e8:	0092      	lsls	r2, r2, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	461a      	mov	r2, r3
 80006ee:	0091      	lsls	r1, r2, #2
 80006f0:	461a      	mov	r2, r3
 80006f2:	460b      	mov	r3, r1
 80006f4:	4413      	add	r3, r2
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	81fb      	strh	r3, [r7, #14]
    		//update the size of the table
    		size = SAMPLES_SEC / freq;
 80006fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000700:	f24a 4210 	movw	r2, #42000	; 0xa410
 8000704:	fb92 f3f3 	sdiv	r3, r2, r3
 8000708:	b21a      	sxth	r2, r3
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <main+0x2d0>)
 800070c:	801a      	strh	r2, [r3, #0]
    		//update the new 50% duty cycle if it is a square
    		if(wave == SQUARE)
 800070e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000712:	2b09      	cmp	r3, #9
 8000714:	d106      	bne.n	8000724 <main+0x298>
    			duty = size / 2;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <main+0x2d0>)
 8000718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800071c:	0fda      	lsrs	r2, r3, #31
 800071e:	4413      	add	r3, r2
 8000720:	105b      	asrs	r3, r3, #1
 8000722:	817b      	strh	r3, [r7, #10]

    		state = CHANGE_WAVE;
 8000724:	2303      	movs	r3, #3
 8000726:	727b      	strb	r3, [r7, #9]
    		break;
 8000728:	e015      	b.n	8000756 <main+0x2ca>

    	case CHANGE_WAVE:
    		//reset the index
    		idx = 0;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <main+0x2cc>)
 800072c:	2200      	movs	r2, #0
 800072e:	801a      	strh	r2, [r3, #0]
    		//generate a new table of points for every wave change
    		points = waveform(freq, wave, duty);
 8000730:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000734:	f997 100d 	ldrsb.w	r1, [r7, #13]
 8000738:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 f8ff 	bl	8000940 <waveform>
 8000742:	4603      	mov	r3, r0
 8000744:	4a06      	ldr	r2, [pc, #24]	; (8000760 <main+0x2d4>)
 8000746:	6013      	str	r3, [r2, #0]

    		state = WAIT;
 8000748:	2300      	movs	r3, #0
 800074a:	727b      	strb	r3, [r7, #9]
    		break;
 800074c:	e003      	b.n	8000756 <main+0x2ca>

    	default:
    		state = WAIT;
 800074e:	2300      	movs	r3, #0
 8000750:	727b      	strb	r3, [r7, #9]
 8000752:	e6f4      	b.n	800053e <main+0xb2>
    		break;
 8000754:	bf00      	nop
    switch(state){
 8000756:	e6f2      	b.n	800053e <main+0xb2>
 8000758:	2000002c 	.word	0x2000002c
 800075c:	2000002e 	.word	0x2000002e
 8000760:	20000028 	.word	0x20000028
 8000764:	40021000 	.word	0x40021000
 8000768:	e000e100 	.word	0xe000e100
 800076c:	00030d3f 	.word	0x00030d3f
 8000770:	66666667 	.word	0x66666667

08000774 <TIM2_IRQHandler>:
  }//end while

}//end main

//Timer 2 ISR: plot a new point every time the timer goes off
void TIM2_IRQHandler(void){
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	//check status register for universal event flag
	if(TIM2->SR & TIM_SR_UIF){					//if the interrupt occurs
 8000778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800077c:	691b      	ldr	r3, [r3, #16]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	2b00      	cmp	r3, #0
 8000784:	d027      	beq.n	80007d6 <TIM2_IRQHandler+0x62>
		TIM2->SR &= ~(TIM_SR_UIF);				//clear interrupt flag
 8000786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800078a:	691b      	ldr	r3, [r3, #16]
 800078c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000790:	f023 0301 	bic.w	r3, r3, #1
 8000794:	6113      	str	r3, [r2, #16]
		if(idx == size){						//if the end of table is reached
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <TIM2_IRQHandler+0x68>)
 8000798:	f9b3 2000 	ldrsh.w	r2, [r3]
 800079c:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <TIM2_IRQHandler+0x6c>)
 800079e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d102      	bne.n	80007ac <TIM2_IRQHandler+0x38>
			idx = 0;							//reset the index
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <TIM2_IRQHandler+0x68>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	801a      	strh	r2, [r3, #0]
		}
		DAC_write(*(points + idx));				//write a point to the DAC
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <TIM2_IRQHandler+0x70>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <TIM2_IRQHandler+0x68>)
 80007b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fd88 	bl	80002d4 <DAC_write>
		idx++;									//increment index into lookup table
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <TIM2_IRQHandler+0x68>)
 80007c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	3301      	adds	r3, #1
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	b21a      	sxth	r2, r3
 80007d2:	4b02      	ldr	r3, [pc, #8]	; (80007dc <TIM2_IRQHandler+0x68>)
 80007d4:	801a      	strh	r2, [r3, #0]
	}
}//end TIM2ISR
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000002c 	.word	0x2000002c
 80007e0:	2000002e 	.word	0x2000002e
 80007e4:	20000028 	.word	0x20000028

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b096      	sub	sp, #88	; 0x58
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2244      	movs	r2, #68	; 0x44
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 f97e 	bl	8001af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800080a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800080e:	f000 fb31 	bl	8000e74 <HAL_PWREx_ControlVoltageScaling>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000818:	f000 f82c 	bl	8000874 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800081c:	2310      	movs	r3, #16
 800081e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000820:	2301      	movs	r3, #1
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000828:	23a0      	movs	r3, #160	; 0xa0
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800082c:	2300      	movs	r3, #0
 800082e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4618      	mov	r0, r3
 8000836:	f000 fb73 	bl	8000f20 <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000840:	f000 f818 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	230f      	movs	r3, #15
 8000846:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	2101      	movs	r1, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f000 ff3b 	bl	80016d8 <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000868:	f000 f804 	bl	8000874 <Error_Handler>
  }
}
 800086c:	bf00      	nop
 800086e:	3758      	adds	r7, #88	; 0x58
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	e7fe      	b.n	800087c <Error_Handler+0x8>
	...

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <HAL_MspInit+0x44>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088a:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <HAL_MspInit+0x44>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6613      	str	r3, [r2, #96]	; 0x60
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <HAL_MspInit+0x44>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_MspInit+0x44>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_MspInit+0x44>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	6593      	str	r3, [r2, #88]	; 0x58
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_MspInit+0x44>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <NMI_Handler+0x4>

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <MemManage_Handler+0x4>

080008da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000914:	f000 f99a 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <SystemInit+0x20>)
 8000922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000926:	4a05      	ldr	r2, [pc, #20]	; (800093c <SystemInit+0x20>)
 8000928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800092c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <waveform>:
 */


#include "waveforms.h"

int32_t* waveform(int16_t freq, int8_t wavetype, int16_t duty){
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b087      	sub	sp, #28
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	80fb      	strh	r3, [r7, #6]
 800094a:	460b      	mov	r3, r1
 800094c:	717b      	strb	r3, [r7, #5]
 800094e:	4613      	mov	r3, r2
 8000950:	807b      	strh	r3, [r7, #2]
	//compute the number of samples for the given frequency
	int32_t numsamples = (SAMPLES_SEC) / (freq);
 8000952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000956:	f24a 4210 	movw	r2, #42000	; 0xa410
 800095a:	fb92 f3f3 	sdiv	r3, r2, r3
 800095e:	613b      	str	r3, [r7, #16]
	//create an array of MAXSIZE in order to hold points
	static int32_t points[MAXSIZE] = {0};
	//the increment size for triangle and sawtooth
	int8_t inc = VOUTH/numsamples;
 8000960:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	fb92 f3f3 	sdiv	r3, r2, r3
 800096a:	73fb      	strb	r3, [r7, #15]
	//starting voltage
	int16_t vout = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	82fb      	strh	r3, [r7, #22]


	//calculate a point for every sample, then convert it to a DAC value
	for(int16_t i = 0; i < numsamples; i++){
 8000970:	2300      	movs	r3, #0
 8000972:	82bb      	strh	r3, [r7, #20]
 8000974:	e0d5      	b.n	8000b22 <waveform+0x1e2>
		//make the right calculation according to wavetype
		switch(wavetype){
 8000976:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800097a:	3b06      	subs	r3, #6
 800097c:	2b03      	cmp	r3, #3
 800097e:	f200 80ca 	bhi.w	8000b16 <waveform+0x1d6>
 8000982:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <waveform+0x48>)
 8000984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000988:	08000999 	.word	0x08000999
 800098c:	08000a53 	.word	0x08000a53
 8000990:	08000ab7 	.word	0x08000ab7
 8000994:	08000add 	.word	0x08000add
			//uses a lookup table in order to plot sine points
			case SINE:
				if(freq == 100){
 8000998:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800099c:	2b64      	cmp	r3, #100	; 0x64
 800099e:	d10e      	bne.n	80009be <waveform+0x7e>
					points[i] = DAC_volt_conv(sineTable100[i]);
 80009a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80009a4:	4a64      	ldr	r2, [pc, #400]	; (8000b38 <waveform+0x1f8>)
 80009a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009aa:	f9b7 4014 	ldrsh.w	r4, [r7, #20]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fcac 	bl	800030c <DAC_volt_conv>
 80009b4:	4603      	mov	r3, r0
 80009b6:	4a61      	ldr	r2, [pc, #388]	; (8000b3c <waveform+0x1fc>)
 80009b8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
					points[i] = DAC_volt_conv(sineTable400[i]);
				}
				else{
					points[i] = DAC_volt_conv(sineTable500[i]);
				}
				break;
 80009bc:	e0ab      	b.n	8000b16 <waveform+0x1d6>
				else if(freq == 200){
 80009be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c2:	2bc8      	cmp	r3, #200	; 0xc8
 80009c4:	d10e      	bne.n	80009e4 <waveform+0xa4>
					points[i] = DAC_volt_conv(sineTable200[i]);
 80009c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80009ca:	4a5d      	ldr	r2, [pc, #372]	; (8000b40 <waveform+0x200>)
 80009cc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80009d0:	f9b7 4014 	ldrsh.w	r4, [r7, #20]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fc99 	bl	800030c <DAC_volt_conv>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a57      	ldr	r2, [pc, #348]	; (8000b3c <waveform+0x1fc>)
 80009de:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				break;
 80009e2:	e098      	b.n	8000b16 <waveform+0x1d6>
				else if(freq == 300){
 80009e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009e8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80009ec:	d10e      	bne.n	8000a0c <waveform+0xcc>
					points[i] = DAC_volt_conv(sineTable300[i]);
 80009ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80009f2:	4a54      	ldr	r2, [pc, #336]	; (8000b44 <waveform+0x204>)
 80009f4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80009f8:	f9b7 4014 	ldrsh.w	r4, [r7, #20]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fc85 	bl	800030c <DAC_volt_conv>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4a4d      	ldr	r2, [pc, #308]	; (8000b3c <waveform+0x1fc>)
 8000a06:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				break;
 8000a0a:	e084      	b.n	8000b16 <waveform+0x1d6>
				else if(freq == 400){
 8000a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a10:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000a14:	d10e      	bne.n	8000a34 <waveform+0xf4>
					points[i] = DAC_volt_conv(sineTable400[i]);
 8000a16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a1a:	4a4b      	ldr	r2, [pc, #300]	; (8000b48 <waveform+0x208>)
 8000a1c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000a20:	f9b7 4014 	ldrsh.w	r4, [r7, #20]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fc71 	bl	800030c <DAC_volt_conv>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	4a43      	ldr	r2, [pc, #268]	; (8000b3c <waveform+0x1fc>)
 8000a2e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				break;
 8000a32:	e070      	b.n	8000b16 <waveform+0x1d6>
					points[i] = DAC_volt_conv(sineTable500[i]);
 8000a34:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a38:	4a44      	ldr	r2, [pc, #272]	; (8000b4c <waveform+0x20c>)
 8000a3a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000a3e:	f9b7 4014 	ldrsh.w	r4, [r7, #20]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fc62 	bl	800030c <DAC_volt_conv>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4a3c      	ldr	r2, [pc, #240]	; (8000b3c <waveform+0x1fc>)
 8000a4c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				break;
 8000a50:	e061      	b.n	8000b16 <waveform+0x1d6>
			//increases for half of the samples, decreases other half
			case TRIANGLE:
				if(i <= numsamples/2){
 8000a52:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	0fd9      	lsrs	r1, r3, #31
 8000a5a:	440b      	add	r3, r1
 8000a5c:	105b      	asrs	r3, r3, #1
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	dc14      	bgt.n	8000a8c <waveform+0x14c>
					vout += inc * 2;
 8000a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	8afb      	ldrh	r3, [r7, #22]
 8000a6e:	4413      	add	r3, r2
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	82fb      	strh	r3, [r7, #22]
					points[i] = DAC_volt_conv(vout);
 8000a74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a78:	f9b7 4014 	ldrsh.w	r4, [r7, #20]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fc45 	bl	800030c <DAC_volt_conv>
 8000a82:	4603      	mov	r3, r0
 8000a84:	4a2d      	ldr	r2, [pc, #180]	; (8000b3c <waveform+0x1fc>)
 8000a86:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				}
				else{
					vout -= inc * 2;
					points[i] = DAC_volt_conv(vout);
				}
				break;
 8000a8a:	e044      	b.n	8000b16 <waveform+0x1d6>
					vout -= inc * 2;
 8000a8c:	8afa      	ldrh	r2, [r7, #22]
 8000a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	82fb      	strh	r3, [r7, #22]
					points[i] = DAC_volt_conv(vout);
 8000a9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000aa2:	f9b7 4014 	ldrsh.w	r4, [r7, #20]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fc30 	bl	800030c <DAC_volt_conv>
 8000aac:	4603      	mov	r3, r0
 8000aae:	4a23      	ldr	r2, [pc, #140]	; (8000b3c <waveform+0x1fc>)
 8000ab0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				break;
 8000ab4:	e02f      	b.n	8000b16 <waveform+0x1d6>
			//increases to 3.0V per period, then back to 0V
			case SAWTOOTH:
				vout += inc;
 8000ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	8afb      	ldrh	r3, [r7, #22]
 8000abe:	4413      	add	r3, r2
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	82fb      	strh	r3, [r7, #22]
				points[i] = DAC_volt_conv(vout);
 8000ac4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ac8:	f9b7 4014 	ldrsh.w	r4, [r7, #20]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fc1d 	bl	800030c <DAC_volt_conv>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <waveform+0x1fc>)
 8000ad6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				break;
 8000ada:	e01c      	b.n	8000b16 <waveform+0x1d6>
			//high for the number of samples - the duty cycle, else low
			case SQUARE:
				if(i < (numsamples - duty)) {
 8000adc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000ae0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ae4:	6939      	ldr	r1, [r7, #16]
 8000ae6:	1acb      	subs	r3, r1, r3
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	da0a      	bge.n	8000b02 <waveform+0x1c2>
					points[i] = DAC_volt_conv(VOUTH);
 8000aec:	f9b7 4014 	ldrsh.w	r4, [r7, #20]
 8000af0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000af4:	f7ff fc0a 	bl	800030c <DAC_volt_conv>
 8000af8:	4603      	mov	r3, r0
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <waveform+0x1fc>)
 8000afc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				}
				else {
					points[i] = DAC_volt_conv(VOUTL);
				}
				break;
 8000b00:	e008      	b.n	8000b14 <waveform+0x1d4>
					points[i] = DAC_volt_conv(VOUTL);
 8000b02:	f9b7 4014 	ldrsh.w	r4, [r7, #20]
 8000b06:	2000      	movs	r0, #0
 8000b08:	f7ff fc00 	bl	800030c <DAC_volt_conv>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <waveform+0x1fc>)
 8000b10:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				break;
 8000b14:	bf00      	nop
	for(int16_t i = 0; i < numsamples; i++){
 8000b16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	82bb      	strh	r3, [r7, #20]
 8000b22:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	f73f af24 	bgt.w	8000976 <waveform+0x36>
		}
	}
	//return pointer to array
	return points;
 8000b2e:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <waveform+0x1fc>)
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	371c      	adds	r7, #28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd90      	pop	{r4, r7, pc}
 8000b38:	08001b70 	.word	0x08001b70
 8000b3c:	20000030 	.word	0x20000030
 8000b40:	08001eb8 	.word	0x08001eb8
 8000b44:	0800205c 	.word	0x0800205c
 8000b48:	08002174 	.word	0x08002174
 8000b4c:	08002248 	.word	0x08002248

08000b50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b54:	f7ff fee2 	bl	800091c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	; (8000b90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <LoopForever+0xe>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	; (8000b9c <LoopForever+0x16>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f000 ff97 	bl	8001ab0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b82:	f7ff fc83 	bl	800048c <main>

08000b86 <LoopForever>:

LoopForever:
    b LoopForever
 8000b86:	e7fe      	b.n	8000b86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b94:	080022f8 	.word	0x080022f8
  ldr r2, =_sbss
 8000b98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b9c:	200006c4 	.word	0x200006c4

08000ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC1_2_IRQHandler>

08000ba2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bac:	2003      	movs	r0, #3
 8000bae:	f000 f91f 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb2:	200f      	movs	r0, #15
 8000bb4:	f000 f80e 	bl	8000bd4 <HAL_InitTick>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	71fb      	strb	r3, [r7, #7]
 8000bc2:	e001      	b.n	8000bc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bc4:	f7ff fe5c 	bl	8000880 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <HAL_InitTick+0x6c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d023      	beq.n	8000c30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_InitTick+0x70>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <HAL_InitTick+0x6c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f91d 	bl	8000e3e <HAL_SYSTICK_Config>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d10f      	bne.n	8000c2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b0f      	cmp	r3, #15
 8000c0e:	d809      	bhi.n	8000c24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c10:	2200      	movs	r2, #0
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c18:	f000 f8f5 	bl	8000e06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <HAL_InitTick+0x74>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	e007      	b.n	8000c34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	73fb      	strb	r3, [r7, #15]
 8000c28:	e004      	b.n	8000c34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	73fb      	strb	r3, [r7, #15]
 8000c2e:	e001      	b.n	8000c34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x20>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x24>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <HAL_IncTick+0x24>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	200006c0 	.word	0x200006c0

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <HAL_GetTick+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	200006c0 	.word	0x200006c0

08000c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cbe:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	60d3      	str	r3, [r2, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <__NVIC_GetPriorityGrouping+0x18>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	f003 0307 	and.w	r3, r3, #7
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	; (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	; (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	; 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dbc:	d301      	bcc.n	8000dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00f      	b.n	8000de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <SysTick_Config+0x40>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dca:	210f      	movs	r1, #15
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd0:	f7ff ff8e 	bl	8000cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <SysTick_Config+0x40>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <SysTick_Config+0x40>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff47 	bl	8000c8c <__NVIC_SetPriorityGrouping>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff5c 	bl	8000cd4 <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff8e 	bl	8000d44 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5d 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ffb0 	bl	8000dac <SysTick_Config>
 8000e4c:	4603      	mov	r3, r0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40007000 	.word	0x40007000

08000e74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e82:	d130      	bne.n	8000ee6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e84:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e90:	d038      	beq.n	8000f04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e92:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e9a:	4a1e      	ldr	r2, [pc, #120]	; (8000f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2232      	movs	r2, #50	; 0x32
 8000ea8:	fb02 f303 	mul.w	r3, r2, r3
 8000eac:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	0c9b      	lsrs	r3, r3, #18
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eb8:	e002      	b.n	8000ec0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec2:	695b      	ldr	r3, [r3, #20]
 8000ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ecc:	d102      	bne.n	8000ed4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f2      	bne.n	8000eba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ee0:	d110      	bne.n	8000f04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e00f      	b.n	8000f06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ef2:	d007      	beq.n	8000f04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000efc:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40007000 	.word	0x40007000
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	431bde83 	.word	0x431bde83

08000f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e3ca      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f32:	4b97      	ldr	r3, [pc, #604]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f003 030c 	and.w	r3, r3, #12
 8000f3a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f3c:	4b94      	ldr	r3, [pc, #592]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0310 	and.w	r3, r3, #16
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 80e4 	beq.w	800111c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d007      	beq.n	8000f6a <HAL_RCC_OscConfig+0x4a>
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	2b0c      	cmp	r3, #12
 8000f5e:	f040 808b 	bne.w	8001078 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	f040 8087 	bne.w	8001078 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f6a:	4b89      	ldr	r3, [pc, #548]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d005      	beq.n	8000f82 <HAL_RCC_OscConfig+0x62>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e3a2      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a1a      	ldr	r2, [r3, #32]
 8000f86:	4b82      	ldr	r3, [pc, #520]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d004      	beq.n	8000f9c <HAL_RCC_OscConfig+0x7c>
 8000f92:	4b7f      	ldr	r3, [pc, #508]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f9a:	e005      	b.n	8000fa8 <HAL_RCC_OscConfig+0x88>
 8000f9c:	4b7c      	ldr	r3, [pc, #496]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8000f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fa2:	091b      	lsrs	r3, r3, #4
 8000fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d223      	bcs.n	8000ff4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 fd1d 	bl	80019f0 <RCC_SetFlashLatencyFromMSIRange>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e383      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fc0:	4b73      	ldr	r3, [pc, #460]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a72      	ldr	r2, [pc, #456]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8000fc6:	f043 0308 	orr.w	r3, r3, #8
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b70      	ldr	r3, [pc, #448]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	496d      	ldr	r1, [pc, #436]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fde:	4b6c      	ldr	r3, [pc, #432]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	4968      	ldr	r1, [pc, #416]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	604b      	str	r3, [r1, #4]
 8000ff2:	e025      	b.n	8001040 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ff4:	4b66      	ldr	r3, [pc, #408]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a65      	ldr	r2, [pc, #404]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8000ffa:	f043 0308 	orr.w	r3, r3, #8
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b63      	ldr	r3, [pc, #396]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	4960      	ldr	r1, [pc, #384]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 800100e:	4313      	orrs	r3, r2
 8001010:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001012:	4b5f      	ldr	r3, [pc, #380]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	495b      	ldr	r1, [pc, #364]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8001022:	4313      	orrs	r3, r2
 8001024:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d109      	bne.n	8001040 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	4618      	mov	r0, r3
 8001032:	f000 fcdd 	bl	80019f0 <RCC_SetFlashLatencyFromMSIRange>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e343      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001040:	f000 fc4a 	bl	80018d8 <HAL_RCC_GetSysClockFreq>
 8001044:	4602      	mov	r2, r0
 8001046:	4b52      	ldr	r3, [pc, #328]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	f003 030f 	and.w	r3, r3, #15
 8001050:	4950      	ldr	r1, [pc, #320]	; (8001194 <HAL_RCC_OscConfig+0x274>)
 8001052:	5ccb      	ldrb	r3, [r1, r3]
 8001054:	f003 031f 	and.w	r3, r3, #31
 8001058:	fa22 f303 	lsr.w	r3, r2, r3
 800105c:	4a4e      	ldr	r2, [pc, #312]	; (8001198 <HAL_RCC_OscConfig+0x278>)
 800105e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001060:	4b4e      	ldr	r3, [pc, #312]	; (800119c <HAL_RCC_OscConfig+0x27c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fdb5 	bl	8000bd4 <HAL_InitTick>
 800106a:	4603      	mov	r3, r0
 800106c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d052      	beq.n	800111a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	e327      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d032      	beq.n	80010e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001080:	4b43      	ldr	r3, [pc, #268]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a42      	ldr	r2, [pc, #264]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800108c:	f7ff fdf2 	bl	8000c74 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001094:	f7ff fdee 	bl	8000c74 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e310      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010a6:	4b3a      	ldr	r3, [pc, #232]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f0      	beq.n	8001094 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010b2:	4b37      	ldr	r3, [pc, #220]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a36      	ldr	r2, [pc, #216]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 80010b8:	f043 0308 	orr.w	r3, r3, #8
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	4b34      	ldr	r3, [pc, #208]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	4931      	ldr	r1, [pc, #196]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 80010cc:	4313      	orrs	r3, r2
 80010ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010d0:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69db      	ldr	r3, [r3, #28]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	492c      	ldr	r1, [pc, #176]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 80010e0:	4313      	orrs	r3, r2
 80010e2:	604b      	str	r3, [r1, #4]
 80010e4:	e01a      	b.n	800111c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010e6:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a29      	ldr	r2, [pc, #164]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 80010ec:	f023 0301 	bic.w	r3, r3, #1
 80010f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010f2:	f7ff fdbf 	bl	8000c74 <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010fa:	f7ff fdbb 	bl	8000c74 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e2dd      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1f0      	bne.n	80010fa <HAL_RCC_OscConfig+0x1da>
 8001118:	e000      	b.n	800111c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800111a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b00      	cmp	r3, #0
 8001126:	d074      	beq.n	8001212 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	2b08      	cmp	r3, #8
 800112c:	d005      	beq.n	800113a <HAL_RCC_OscConfig+0x21a>
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	2b0c      	cmp	r3, #12
 8001132:	d10e      	bne.n	8001152 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	2b03      	cmp	r3, #3
 8001138:	d10b      	bne.n	8001152 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d064      	beq.n	8001210 <HAL_RCC_OscConfig+0x2f0>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d160      	bne.n	8001210 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e2ba      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800115a:	d106      	bne.n	800116a <HAL_RCC_OscConfig+0x24a>
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8001162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	e026      	b.n	80011b8 <HAL_RCC_OscConfig+0x298>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001172:	d115      	bne.n	80011a0 <HAL_RCC_OscConfig+0x280>
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a05      	ldr	r2, [pc, #20]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 800117a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a02      	ldr	r2, [pc, #8]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 8001186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	e014      	b.n	80011b8 <HAL_RCC_OscConfig+0x298>
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000
 8001194:	08001b30 	.word	0x08001b30
 8001198:	20000000 	.word	0x20000000
 800119c:	20000004 	.word	0x20000004
 80011a0:	4ba0      	ldr	r3, [pc, #640]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a9f      	ldr	r2, [pc, #636]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 80011a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	4b9d      	ldr	r3, [pc, #628]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a9c      	ldr	r2, [pc, #624]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 80011b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d013      	beq.n	80011e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c0:	f7ff fd58 	bl	8000c74 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c8:	f7ff fd54 	bl	8000c74 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	; 0x64
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e276      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011da:	4b92      	ldr	r3, [pc, #584]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0x2a8>
 80011e6:	e014      	b.n	8001212 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e8:	f7ff fd44 	bl	8000c74 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff fd40 	bl	8000c74 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b64      	cmp	r3, #100	; 0x64
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e262      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001202:	4b88      	ldr	r3, [pc, #544]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x2d0>
 800120e:	e000      	b.n	8001212 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d060      	beq.n	80012e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	2b04      	cmp	r3, #4
 8001222:	d005      	beq.n	8001230 <HAL_RCC_OscConfig+0x310>
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2b0c      	cmp	r3, #12
 8001228:	d119      	bne.n	800125e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d116      	bne.n	800125e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001230:	4b7c      	ldr	r3, [pc, #496]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <HAL_RCC_OscConfig+0x328>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e23f      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001248:	4b76      	ldr	r3, [pc, #472]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	061b      	lsls	r3, r3, #24
 8001256:	4973      	ldr	r1, [pc, #460]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 8001258:	4313      	orrs	r3, r2
 800125a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800125c:	e040      	b.n	80012e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d023      	beq.n	80012ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001266:	4b6f      	ldr	r3, [pc, #444]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a6e      	ldr	r2, [pc, #440]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 800126c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001272:	f7ff fcff 	bl	8000c74 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127a:	f7ff fcfb 	bl	8000c74 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e21d      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800128c:	4b65      	ldr	r3, [pc, #404]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001298:	4b62      	ldr	r3, [pc, #392]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	061b      	lsls	r3, r3, #24
 80012a6:	495f      	ldr	r1, [pc, #380]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]
 80012ac:	e018      	b.n	80012e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ae:	4b5d      	ldr	r3, [pc, #372]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a5c      	ldr	r2, [pc, #368]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 80012b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ba:	f7ff fcdb 	bl	8000c74 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c2:	f7ff fcd7 	bl	8000c74 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e1f9      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012d4:	4b53      	ldr	r3, [pc, #332]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f0      	bne.n	80012c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d03c      	beq.n	8001366 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d01c      	beq.n	800132e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f4:	4b4b      	ldr	r3, [pc, #300]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 80012f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012fa:	4a4a      	ldr	r2, [pc, #296]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001304:	f7ff fcb6 	bl	8000c74 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800130c:	f7ff fcb2 	bl	8000c74 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e1d4      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800131e:	4b41      	ldr	r3, [pc, #260]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 8001320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0ef      	beq.n	800130c <HAL_RCC_OscConfig+0x3ec>
 800132c:	e01b      	b.n	8001366 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800132e:	4b3d      	ldr	r3, [pc, #244]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 8001330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001334:	4a3b      	ldr	r2, [pc, #236]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 8001336:	f023 0301 	bic.w	r3, r3, #1
 800133a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133e:	f7ff fc99 	bl	8000c74 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001346:	f7ff fc95 	bl	8000c74 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e1b7      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001358:	4b32      	ldr	r3, [pc, #200]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 800135a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1ef      	bne.n	8001346 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 80a6 	beq.w	80014c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001374:	2300      	movs	r3, #0
 8001376:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001378:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 800137a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10d      	bne.n	80013a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001384:	4b27      	ldr	r3, [pc, #156]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 8001386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001388:	4a26      	ldr	r2, [pc, #152]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 800138a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138e:	6593      	str	r3, [r2, #88]	; 0x58
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 8001392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800139c:	2301      	movs	r3, #1
 800139e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <HAL_RCC_OscConfig+0x508>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d118      	bne.n	80013de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013ac:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <HAL_RCC_OscConfig+0x508>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_RCC_OscConfig+0x508>)
 80013b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b8:	f7ff fc5c 	bl	8000c74 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c0:	f7ff fc58 	bl	8000c74 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e17a      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_RCC_OscConfig+0x508>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d108      	bne.n	80013f8 <HAL_RCC_OscConfig+0x4d8>
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 80013e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013f6:	e029      	b.n	800144c <HAL_RCC_OscConfig+0x52c>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b05      	cmp	r3, #5
 80013fe:	d115      	bne.n	800142c <HAL_RCC_OscConfig+0x50c>
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 8001402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001406:	4a07      	ldr	r2, [pc, #28]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 8001412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001416:	4a03      	ldr	r2, [pc, #12]	; (8001424 <HAL_RCC_OscConfig+0x504>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001420:	e014      	b.n	800144c <HAL_RCC_OscConfig+0x52c>
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	40007000 	.word	0x40007000
 800142c:	4b9c      	ldr	r3, [pc, #624]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 800142e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001432:	4a9b      	ldr	r2, [pc, #620]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 8001434:	f023 0301 	bic.w	r3, r3, #1
 8001438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800143c:	4b98      	ldr	r3, [pc, #608]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 800143e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001442:	4a97      	ldr	r2, [pc, #604]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 8001444:	f023 0304 	bic.w	r3, r3, #4
 8001448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d016      	beq.n	8001482 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001454:	f7ff fc0e 	bl	8000c74 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800145a:	e00a      	b.n	8001472 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145c:	f7ff fc0a 	bl	8000c74 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f241 3288 	movw	r2, #5000	; 0x1388
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e12a      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001472:	4b8b      	ldr	r3, [pc, #556]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 8001474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0ed      	beq.n	800145c <HAL_RCC_OscConfig+0x53c>
 8001480:	e015      	b.n	80014ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001482:	f7ff fbf7 	bl	8000c74 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001488:	e00a      	b.n	80014a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148a:	f7ff fbf3 	bl	8000c74 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f241 3288 	movw	r2, #5000	; 0x1388
 8001498:	4293      	cmp	r3, r2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e113      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014a0:	4b7f      	ldr	r3, [pc, #508]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 80014a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1ed      	bne.n	800148a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014ae:	7ffb      	ldrb	r3, [r7, #31]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d105      	bne.n	80014c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014b4:	4b7a      	ldr	r3, [pc, #488]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 80014b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b8:	4a79      	ldr	r2, [pc, #484]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 80014ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014be:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80fe 	beq.w	80016c6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	f040 80d0 	bne.w	8001674 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014d4:	4b72      	ldr	r3, [pc, #456]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f003 0203 	and.w	r2, r3, #3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d130      	bne.n	800154a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	3b01      	subs	r3, #1
 80014f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d127      	bne.n	800154a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001504:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001506:	429a      	cmp	r2, r3
 8001508:	d11f      	bne.n	800154a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001514:	2a07      	cmp	r2, #7
 8001516:	bf14      	ite	ne
 8001518:	2201      	movne	r2, #1
 800151a:	2200      	moveq	r2, #0
 800151c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800151e:	4293      	cmp	r3, r2
 8001520:	d113      	bne.n	800154a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152c:	085b      	lsrs	r3, r3, #1
 800152e:	3b01      	subs	r3, #1
 8001530:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001532:	429a      	cmp	r2, r3
 8001534:	d109      	bne.n	800154a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	085b      	lsrs	r3, r3, #1
 8001542:	3b01      	subs	r3, #1
 8001544:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001546:	429a      	cmp	r2, r3
 8001548:	d06e      	beq.n	8001628 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	2b0c      	cmp	r3, #12
 800154e:	d069      	beq.n	8001624 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001550:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d105      	bne.n	8001568 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0ad      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800156c:	4b4c      	ldr	r3, [pc, #304]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a4b      	ldr	r2, [pc, #300]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 8001572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001576:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001578:	f7ff fb7c 	bl	8000c74 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001580:	f7ff fb78 	bl	8000c74 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e09a      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001592:	4b43      	ldr	r3, [pc, #268]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800159e:	4b40      	ldr	r3, [pc, #256]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	4b40      	ldr	r3, [pc, #256]	; (80016a4 <HAL_RCC_OscConfig+0x784>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015ae:	3a01      	subs	r2, #1
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	4311      	orrs	r1, r2
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015b8:	0212      	lsls	r2, r2, #8
 80015ba:	4311      	orrs	r1, r2
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80015c0:	0852      	lsrs	r2, r2, #1
 80015c2:	3a01      	subs	r2, #1
 80015c4:	0552      	lsls	r2, r2, #21
 80015c6:	4311      	orrs	r1, r2
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015cc:	0852      	lsrs	r2, r2, #1
 80015ce:	3a01      	subs	r2, #1
 80015d0:	0652      	lsls	r2, r2, #25
 80015d2:	4311      	orrs	r1, r2
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015d8:	0912      	lsrs	r2, r2, #4
 80015da:	0452      	lsls	r2, r2, #17
 80015dc:	430a      	orrs	r2, r1
 80015de:	4930      	ldr	r1, [pc, #192]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015e4:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a2d      	ldr	r2, [pc, #180]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 80015ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015f0:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4a2a      	ldr	r2, [pc, #168]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 80015f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015fc:	f7ff fb3a 	bl	8000c74 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001604:	f7ff fb36 	bl	8000c74 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e058      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001616:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001622:	e050      	b.n	80016c6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e04f      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d148      	bne.n	80016c6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a19      	ldr	r2, [pc, #100]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 800163a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800163e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4a16      	ldr	r2, [pc, #88]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 8001646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800164a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800164c:	f7ff fb12 	bl	8000c74 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001654:	f7ff fb0e 	bl	8000c74 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e030      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x734>
 8001672:	e028      	b.n	80016c6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	2b0c      	cmp	r3, #12
 8001678:	d023      	beq.n	80016c2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_RCC_OscConfig+0x780>)
 8001680:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001686:	f7ff faf5 	bl	8000c74 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800168c:	e00c      	b.n	80016a8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168e:	f7ff faf1 	bl	8000c74 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d905      	bls.n	80016a8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e013      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
 80016a0:	40021000 	.word	0x40021000
 80016a4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_RCC_OscConfig+0x7b0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1ec      	bne.n	800168e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_RCC_OscConfig+0x7b0>)
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	4905      	ldr	r1, [pc, #20]	; (80016d0 <HAL_RCC_OscConfig+0x7b0>)
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_RCC_OscConfig+0x7b4>)
 80016bc:	4013      	ands	r3, r2
 80016be:	60cb      	str	r3, [r1, #12]
 80016c0:	e001      	b.n	80016c6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000
 80016d4:	feeefffc 	.word	0xfeeefffc

080016d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0e7      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016ec:	4b75      	ldr	r3, [pc, #468]	; (80018c4 <HAL_RCC_ClockConfig+0x1ec>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d910      	bls.n	800171c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fa:	4b72      	ldr	r3, [pc, #456]	; (80018c4 <HAL_RCC_ClockConfig+0x1ec>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 0207 	bic.w	r2, r3, #7
 8001702:	4970      	ldr	r1, [pc, #448]	; (80018c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170a:	4b6e      	ldr	r3, [pc, #440]	; (80018c4 <HAL_RCC_ClockConfig+0x1ec>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0cf      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d010      	beq.n	800174a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	4b66      	ldr	r3, [pc, #408]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001734:	429a      	cmp	r2, r3
 8001736:	d908      	bls.n	800174a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001738:	4b63      	ldr	r3, [pc, #396]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4960      	ldr	r1, [pc, #384]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d04c      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800175e:	4b5a      	ldr	r3, [pc, #360]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d121      	bne.n	80017ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e0a6      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001776:	4b54      	ldr	r3, [pc, #336]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d115      	bne.n	80017ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e09a      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800178e:	4b4e      	ldr	r3, [pc, #312]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e08e      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800179e:	4b4a      	ldr	r3, [pc, #296]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e086      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017ae:	4b46      	ldr	r3, [pc, #280]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f023 0203 	bic.w	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4943      	ldr	r1, [pc, #268]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017c0:	f7ff fa58 	bl	8000c74 <HAL_GetTick>
 80017c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c6:	e00a      	b.n	80017de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c8:	f7ff fa54 	bl	8000c74 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e06e      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 020c 	and.w	r2, r3, #12
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d1eb      	bne.n	80017c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d010      	beq.n	800181e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001808:	429a      	cmp	r2, r3
 800180a:	d208      	bcs.n	800181e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180c:	4b2e      	ldr	r3, [pc, #184]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	492b      	ldr	r1, [pc, #172]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800181e:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d210      	bcs.n	800184e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182c:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <HAL_RCC_ClockConfig+0x1ec>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f023 0207 	bic.w	r2, r3, #7
 8001834:	4923      	ldr	r1, [pc, #140]	; (80018c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	4313      	orrs	r3, r2
 800183a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800183c:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <HAL_RCC_ClockConfig+0x1ec>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d001      	beq.n	800184e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e036      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	2b00      	cmp	r3, #0
 8001858:	d008      	beq.n	800186c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	4918      	ldr	r1, [pc, #96]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001868:	4313      	orrs	r3, r2
 800186a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b00      	cmp	r3, #0
 8001876:	d009      	beq.n	800188c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4910      	ldr	r1, [pc, #64]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800188c:	f000 f824 	bl	80018d8 <HAL_RCC_GetSysClockFreq>
 8001890:	4602      	mov	r2, r0
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	490b      	ldr	r1, [pc, #44]	; (80018cc <HAL_RCC_ClockConfig+0x1f4>)
 800189e:	5ccb      	ldrb	r3, [r1, r3]
 80018a0:	f003 031f 	and.w	r3, r3, #31
 80018a4:	fa22 f303 	lsr.w	r3, r2, r3
 80018a8:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <HAL_RCC_ClockConfig+0x1f8>)
 80018aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_RCC_ClockConfig+0x1fc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff f98f 	bl	8000bd4 <HAL_InitTick>
 80018b6:	4603      	mov	r3, r0
 80018b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80018ba:	7afb      	ldrb	r3, [r7, #11]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40022000 	.word	0x40022000
 80018c8:	40021000 	.word	0x40021000
 80018cc:	08001b30 	.word	0x08001b30
 80018d0:	20000000 	.word	0x20000000
 80018d4:	20000004 	.word	0x20000004

080018d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e6:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018f0:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_GetSysClockFreq+0x34>
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	2b0c      	cmp	r3, #12
 8001904:	d121      	bne.n	800194a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d11e      	bne.n	800194a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800190c:	4b34      	ldr	r3, [pc, #208]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d107      	bne.n	8001928 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001918:	4b31      	ldr	r3, [pc, #196]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800191a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191e:	0a1b      	lsrs	r3, r3, #8
 8001920:	f003 030f 	and.w	r3, r3, #15
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	e005      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001928:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001934:	4a2b      	ldr	r2, [pc, #172]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10d      	bne.n	8001960 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001948:	e00a      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	2b04      	cmp	r3, #4
 800194e:	d102      	bne.n	8001956 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001950:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	e004      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	2b08      	cmp	r3, #8
 800195a:	d101      	bne.n	8001960 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800195c:	4b23      	ldr	r3, [pc, #140]	; (80019ec <HAL_RCC_GetSysClockFreq+0x114>)
 800195e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d134      	bne.n	80019d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d003      	beq.n	800197e <HAL_RCC_GetSysClockFreq+0xa6>
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2b03      	cmp	r3, #3
 800197a:	d003      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0xac>
 800197c:	e005      	b.n	800198a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800197e:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001980:	617b      	str	r3, [r7, #20]
      break;
 8001982:	e005      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_RCC_GetSysClockFreq+0x114>)
 8001986:	617b      	str	r3, [r7, #20]
      break;
 8001988:	e002      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	617b      	str	r3, [r7, #20]
      break;
 800198e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	3301      	adds	r3, #1
 800199c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	fb03 f202 	mul.w	r2, r3, r2
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	0e5b      	lsrs	r3, r3, #25
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	3301      	adds	r3, #1
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019d0:	69bb      	ldr	r3, [r7, #24]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3724      	adds	r7, #36	; 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000
 80019e4:	08001b40 	.word	0x08001b40
 80019e8:	00f42400 	.word	0x00f42400
 80019ec:	007a1200 	.word	0x007a1200

080019f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019fc:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a08:	f7ff fa26 	bl	8000e58 <HAL_PWREx_GetVoltageRange>
 8001a0c:	6178      	str	r0, [r7, #20]
 8001a0e:	e014      	b.n	8001a3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a10:	4b25      	ldr	r3, [pc, #148]	; (8001aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	4a24      	ldr	r2, [pc, #144]	; (8001aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a1c:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a28:	f7ff fa16 	bl	8000e58 <HAL_PWREx_GetVoltageRange>
 8001a2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	4a1d      	ldr	r2, [pc, #116]	; (8001aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a40:	d10b      	bne.n	8001a5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b80      	cmp	r3, #128	; 0x80
 8001a46:	d919      	bls.n	8001a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2ba0      	cmp	r3, #160	; 0xa0
 8001a4c:	d902      	bls.n	8001a54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a4e:	2302      	movs	r3, #2
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	e013      	b.n	8001a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a54:	2301      	movs	r3, #1
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	e010      	b.n	8001a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b80      	cmp	r3, #128	; 0x80
 8001a5e:	d902      	bls.n	8001a66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a60:	2303      	movs	r3, #3
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	e00a      	b.n	8001a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b80      	cmp	r3, #128	; 0x80
 8001a6a:	d102      	bne.n	8001a72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	e004      	b.n	8001a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b70      	cmp	r3, #112	; 0x70
 8001a76:	d101      	bne.n	8001a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a78:	2301      	movs	r3, #1
 8001a7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f023 0207 	bic.w	r2, r3, #7
 8001a84:	4909      	ldr	r1, [pc, #36]	; (8001aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d001      	beq.n	8001a9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40022000 	.word	0x40022000

08001ab0 <__libc_init_array>:
 8001ab0:	b570      	push	{r4, r5, r6, lr}
 8001ab2:	4d0d      	ldr	r5, [pc, #52]	; (8001ae8 <__libc_init_array+0x38>)
 8001ab4:	4c0d      	ldr	r4, [pc, #52]	; (8001aec <__libc_init_array+0x3c>)
 8001ab6:	1b64      	subs	r4, r4, r5
 8001ab8:	10a4      	asrs	r4, r4, #2
 8001aba:	2600      	movs	r6, #0
 8001abc:	42a6      	cmp	r6, r4
 8001abe:	d109      	bne.n	8001ad4 <__libc_init_array+0x24>
 8001ac0:	4d0b      	ldr	r5, [pc, #44]	; (8001af0 <__libc_init_array+0x40>)
 8001ac2:	4c0c      	ldr	r4, [pc, #48]	; (8001af4 <__libc_init_array+0x44>)
 8001ac4:	f000 f820 	bl	8001b08 <_init>
 8001ac8:	1b64      	subs	r4, r4, r5
 8001aca:	10a4      	asrs	r4, r4, #2
 8001acc:	2600      	movs	r6, #0
 8001ace:	42a6      	cmp	r6, r4
 8001ad0:	d105      	bne.n	8001ade <__libc_init_array+0x2e>
 8001ad2:	bd70      	pop	{r4, r5, r6, pc}
 8001ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ad8:	4798      	blx	r3
 8001ada:	3601      	adds	r6, #1
 8001adc:	e7ee      	b.n	8001abc <__libc_init_array+0xc>
 8001ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ae2:	4798      	blx	r3
 8001ae4:	3601      	adds	r6, #1
 8001ae6:	e7f2      	b.n	8001ace <__libc_init_array+0x1e>
 8001ae8:	080022f0 	.word	0x080022f0
 8001aec:	080022f0 	.word	0x080022f0
 8001af0:	080022f0 	.word	0x080022f0
 8001af4:	080022f4 	.word	0x080022f4

08001af8 <memset>:
 8001af8:	4402      	add	r2, r0
 8001afa:	4603      	mov	r3, r0
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d100      	bne.n	8001b02 <memset+0xa>
 8001b00:	4770      	bx	lr
 8001b02:	f803 1b01 	strb.w	r1, [r3], #1
 8001b06:	e7f9      	b.n	8001afc <memset+0x4>

08001b08 <_init>:
 8001b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0a:	bf00      	nop
 8001b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b0e:	bc08      	pop	{r3}
 8001b10:	469e      	mov	lr, r3
 8001b12:	4770      	bx	lr

08001b14 <_fini>:
 8001b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b16:	bf00      	nop
 8001b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b1a:	bc08      	pop	{r3}
 8001b1c:	469e      	mov	lr, r3
 8001b1e:	4770      	bx	lr
